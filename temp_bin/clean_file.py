import json 
import re 
import random
import csv
from langdetect import detect

review_file = "Health_and_Personal_Care.jsonl"
metadata_file = "meta_Health_and_Personal_Care.jsonl"

# Generate random numbers for indices 1000 items
#random number from a cleaned unique product id list  (58147) in each run you will not get the same number 
# random_numbers = random.sample(range(0, len(result)), 1000)
random_numbers = [38068, 18246, 54853, 5880, 24986, 32828, 54323, 22247, 41878, 3019, 26367, 54075, 2646, 4016, 40306, 33566, 25489, 27827, 8328, 14255, 35449, 13258, 4294, 51235, 23879, 41629, 1479, 3930, 12806, 56030, 14954, 12950, 19684, 17940, 27515, 46843, 4469, 87, 31957, 3440, 37585, 18486, 32339, 53196, 16585, 26859, 45232, 6943, 23297, 57840, 10575, 42136, 5670, 1559, 32115, 48966, 13139, 17437, 50093, 4105, 51598, 15916, 49401, 36642, 20672, 56522, 28298, 3100, 57268, 49647, 51688, 19433, 31502, 49346, 7645, 29667, 12046, 54296, 36981, 26608, 29904, 17443, 27696, 42999, 46165, 19642, 3226, 2287, 29869, 27804, 54936, 27372, 19249, 3566, 55358, 2473, 35082, 55370, 44030, 28661, 27128, 19496, 57371, 4228, 19641, 18346, 4472, 3918, 37445, 17912, 50841, 38426, 46477, 56245, 44561, 500, 21233, 19552, 15147, 48968, 36656, 22565, 18744, 16839, 9726, 47062, 25868, 23475, 14638, 44103, 4608, 44592, 34239, 18630, 9175, 15064, 29000, 33250, 44727, 46412, 30421, 10254, 34066, 15595, 17852, 9524, 21, 33207, 36883, 32622, 17896, 12568, 26253, 27532, 40850, 50996, 814, 13322, 49897, 17166, 8569, 8360, 20090, 25449, 22058, 5197, 3844, 56624, 40155, 57708, 29064, 16287, 40420, 6881, 7147, 24570, 1857, 28338, 33027, 12835, 13821, 8539, 34164, 23690, 5327, 55783, 45969, 48523, 39799, 10612, 16864, 36537, 49156, 18643, 14473, 12070, 28312, 7027, 28740, 36342, 9851, 19526, 44139, 21180, 38061, 46944, 11555, 33206, 19337, 10525, 23387, 18946, 53392, 30593, 14404, 40967, 56814, 27244, 7131, 37759, 127, 15859, 28037, 44124, 53947, 29948, 14612, 22782, 37338, 12147, 13415, 38357, 55817, 48367, 46468, 37798, 21410, 35919, 19224, 1264, 52865, 14649, 16544, 41181, 24427, 33252, 30784, 42335, 57944, 43674, 19051, 23309, 10675, 8370, 20894, 42507, 4372, 29689, 27814, 12501, 46990, 39032, 24091, 15896, 47648, 32584, 27563, 24418, 4796, 6023, 54399, 2841, 12344, 37735, 45858, 44170, 37964, 38730, 57881, 4645, 3060, 7118, 56454, 44537, 54356, 35150, 25492, 48710, 55588, 36622, 10040, 43348, 35132, 19817, 2633, 3061, 28095, 40436, 34798, 26344, 20304, 37840, 4410, 37020, 1982, 20756, 17420, 3734, 2975, 28472, 71, 9123, 14894, 16533, 13067, 41346, 25292, 10404, 4739, 13135, 11782, 35683, 36306, 17194, 40489, 48653, 7560, 39154, 39441, 3733, 12280, 3874, 58107, 41756, 14671, 50563, 12173, 45545, 20815, 32064, 1884, 49132, 8806, 42530, 24218, 16883, 43500, 15877, 49154, 51794, 41309, 53320, 12514, 17355, 53241, 19563, 32353, 7702, 38324, 25671, 40035, 27881, 37361, 40442, 50703, 50004, 31329, 25094, 29539, 39576, 22049, 43587, 57766, 23820, 47179, 49611, 11661, 22281, 51108, 21848, 57558, 52703, 36043, 30295, 42765, 40613, 4581, 26112, 43413, 31093, 34230, 55005, 12566, 54943, 4795, 13282, 28445, 42209, 5752, 49907, 43724, 9262, 50608, 23517, 17766, 668, 49152, 18183, 22515, 57159, 20928, 56580, 34830, 15174, 35091, 45822, 11152, 11512, 42614, 42993, 3680, 56390, 16346, 36171, 20214, 50412, 29319, 32952, 44564, 24428, 57869, 17217, 41387, 57255, 53513, 1539, 33402, 10608, 56795, 34602, 20739, 26318, 47684, 46122, 29245, 38994, 46580, 20092, 47442, 4211, 11266, 5265, 55596, 33838, 27677, 36422, 11252, 25555, 52899, 22272, 42421, 22391, 11625, 20021, 28886, 46120, 41649, 57193, 44342, 17091, 10398, 15663, 33718, 50459, 37596, 34260, 44067, 5105, 8229, 18839, 29953, 54230, 24812, 41327, 16443, 48199, 20510, 439, 41712, 17601, 30791, 17835, 40273, 46919, 47007, 7169, 16104, 42456, 12367, 50521, 20265, 24216, 45299, 46590, 44595, 21279, 54525, 6498, 52980, 13814, 6412, 41874, 46210, 52204, 20347, 42508, 28329, 32736, 11317, 15764, 16111, 53684, 22396, 45322, 38396, 19765, 12960, 21483, 52834, 5871, 21000, 12787, 50828, 46036, 53282, 13941, 6663, 34075, 58005, 38570, 16351, 34644, 31293, 7488, 3989, 9474, 26256, 55468, 39465, 21013, 11134, 17632, 50621, 10375, 9269, 41280, 4659, 39654, 47855, 15830, 38650, 8952, 56135, 12508, 41021, 40422, 25820, 14057, 21349, 48267, 55859, 32090, 25828, 14989, 13086, 18530, 31210, 50316, 30243, 16281, 54764, 30447, 55295, 28934, 2464, 50289, 18644, 22689, 49565, 54812, 5332, 57175, 19014, 44185, 34185, 28535, 47028, 12649, 18162, 38185, 18702, 35724, 784, 11212, 20113, 27982, 38636, 37442, 44042, 21662, 23175, 10133, 22411, 8515, 36854, 16612, 51390, 38884, 49563, 37965, 54733, 38544, 8248, 9843, 979, 30934, 31766, 47554, 54955, 21803, 2166, 12955, 7391, 7691, 23053, 18437, 27118, 48855, 43885, 53088, 46198, 38582, 44522, 50847, 52254, 31514, 40182, 42907, 40832, 52151, 25821, 34360, 12576, 23319, 36849, 20316, 42035, 48647, 3563, 49128, 40667, 7898, 5521, 35747, 53036, 50477, 22283, 18536, 50724, 48868, 19330, 24295, 16967, 15549, 21323, 5386, 992, 30419, 4485, 26286, 45723, 3582, 3955, 21154, 22886, 31363, 55972, 40527, 55813, 41827, 40180, 25314, 44053, 30353, 29677, 39958, 34768, 28618, 56288, 48254, 43743, 37325, 53229, 8679, 11828, 43041, 43275, 48011, 16342, 28194, 17975, 29849, 45272, 36207, 48541, 30013, 17061, 52265, 45937, 20878, 14775, 47268, 51379, 45368, 56813, 45685, 8974, 14338, 23480, 22865, 13383, 36152, 36934, 57712, 48762, 48314, 6002, 56721, 6910, 29793, 36710, 46640, 48420, 23239, 46217, 40399, 46505, 49688, 29394, 57490, 12663, 38523, 46045, 37556, 40443, 36227, 2399, 16984, 1717, 45981, 56640, 29755, 23020, 44058, 19428, 56259, 1248, 33981, 41651, 20324, 13446, 34280, 22364, 30901, 49531, 6101, 35570, 13053, 6986, 5661, 37243, 45434, 57327, 51842, 11635, 5782, 45741, 51961, 48457, 53652, 16035, 40284, 41259, 21050, 21141, 53610, 45363, 42842, 56448, 43406, 24393, 17698, 21849, 22287, 19246, 42680, 51695, 47247, 3725, 36892, 9436, 27559, 24159, 48595, 48210, 35804, 14472, 4535, 31121, 6112, 28866, 38081, 24551, 41573, 8056, 19215, 26976, 52482, 4347, 14707, 2743, 44936, 40790, 16975, 46075, 22945, 22984, 52415, 38683, 5151, 56847, 48325, 8817, 47977, 23216, 44262, 48609, 46822, 12574, 387, 3202, 31241, 57956, 9407, 23414, 6948, 2593, 53225, 47182, 43412, 20256, 41128, 29881, 8816, 27112, 794, 5121, 14780, 45701, 39055, 24210, 46168, 21259, 15390, 43004, 12252, 21684, 53044, 45997, 42932, 5988, 41268, 24113, 57410, 6386, 697, 39505, 4997, 25294, 22409, 42621, 50009, 51353, 28673, 43493, 38992, 36795, 3486, 27759, 13131, 21980, 16425, 31950, 12461, 24653, 3402, 42268, 10500, 44543, 56465, 10287, 17440, 30622, 28644, 49533, 28346, 29552, 45607, 10426, 12972, 12878, 17417, 4642, 48911, 8967, 21764, 35366, 26268, 23882, 26688, 26731, 8692, 15624, 35802, 14141, 41586, 48271, 20665, 6944, 14844, 45123, 31666, 40053, 42877, 5226, 39588, 57, 20431, 48991, 32691, 14466, 44454, 29565, 31798, 52084, 30150, 10207, 45172, 25565, 53361, 41176, 4674, 45245, 19130, 10806, 32414, 24082, 2176, 50686, 55864, 37796, 15770, 46114, 25309, 21862, 22100, 21891, 2985, 8876, 25366, 13078, 50645, 32238, 14603, 39013, 7572, 2429, 8673, 21673, 52012, 31404, 46981, 31733, 8750, 22458, 39054, 9446, 41279, 20428, 25206]



def read_file(filename):
    with open(filename, 'r') as fp:
        for line in fp:
            print(json.loads(line.strip()))
            print({"-----endline-----"})

def clean_review_file(filename):
    with open(filename, 'r') as fp:
        result = []
        set_of_product_id = set()
        
        # Read and process each line in the file
        for line in fp:
            this_line = json.loads(line.strip())
            product_id = this_line["parent_asin"]
            if product_id in set_of_product_id: # Choose only one review for the product
                continue
            else:
                title = this_line["title"]
                review_text = re.sub(r'[\\/]', '', re.sub(r'<[^>]*>', '', this_line["text"]))  # Remove HTML tags and slashes
                
                # Detect language and filter out non-English reviews
                try:
                    if detect(review_text) != 'en':
                        continue
                except:
                    continue
                
                cleaned_data = [title, product_id, review_text]
                set_of_product_id.add(product_id)
                result.append(cleaned_data)
    
    print(len(result))
    selected_results = [result[i] for i in random_numbers]
    # Format the output
    product_id_in_use = set()
    formatted_output = []
    count = 1
    for review in selected_results:
        title, product_id, review_text = review
        product_id_in_use.add(product_id)

        formatted_print = f"{count}. {review_text}\n"
        count += 1
        with open('review.txt', 'a') as review_file:
            review_file.write(formatted_print)
        formatted_output.append({
            "text": review_text,
            "label": "human"
        })
    return formatted_output
 

# I think run this function only once to generate the cleaned file
clean_review_file(review_file)

